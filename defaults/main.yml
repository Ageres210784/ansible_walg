---
walg_backup: yes
walg_version: v1.1
walg_dbs: pg
walg_binary_name: "wal-g-{{ walg_dbs }}-ubuntu-{{ ansible_lsb.release }}-amd64"
walg_url: "https://github.com/wal-g/wal-g/releases/download/{{ walg_version }}/{{ walg_binary_name }}.tar.gz"
walg_user: postgres
walg_group: "{{ walg_user }}"
walg_binary_path: /usr/local/bin
walg_binary: "{% if walg_in_docker %}{{ docker_binary }} exec -i {{ docker_container.walg_container_name }} wal-g.sh{% else %}{{ walg_binary_path }}/wal-g{% endif %}"
walg_config_path: "/var/lib/postgresql"
walg_backup_path: "/tmp/base/wal-g-test-data"
walg_log_path: "/var/log/postgresql"
walg_in_docker: false
docker_binary: /usr/bin/docker
walg_pgdata: "/var/lib/postgresql/12/main"

walg_config:
  WALG_FILE_PREFIX: "{{ walg_backup_path }}"
  WALG_COMPRESSION_METHOD: "brotli"
  WALG_DELTA_MAX_STEPS: "6"
  PGHOST: "/var/run/postgresql"
  PGDATA: "{{ walg_pgdata }}"

postgresql_conf_change: yes
postgresql_conf_dir: "/etc/postgresql/12/main"
postgresql_conf_params:
  - wal_level=replica
  - archive_mode=on
  - archive_command='{{ walg_binary }} wal-push "%p" >> {{ walg_log_path }}/archive_command.log 2>&1'
  - restore_command='{{ walg_binary }} wal-fetch "%f" "%p" >> {{ walg_log_path }}/restore_command.log 2>&1'
postgresql_conf_recovery: {}

walg_restore_name: LATEST

walg_cron_user: "{{ walg_user }}"
walg_cron_time:
  minute: 0
  hour: 1
walg_cron_state: present
walg_delete_before_days: 30

docker_container:
  - walg_container_name: container_name
    walg_cron_user: "{{ walg_user }}"
    walg_cron_time:
      minute: 0
      hour: 1
    walg_cron_state: present
    walg_delete_before_days: 30